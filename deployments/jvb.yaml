apiVersion: apps/v1
kind: StatefulSet
metadata:
  generation: 3
  labels:
    cattle.io/creator: norman
    workload.user.cattle.io/workloadselector: statefulSet-jitsi-jvb
  name: jvb
  namespace: jitsi
spec:
  podManagementPolicy: OrderedReady
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: statefulSet-jitsi-jvb
  serviceName: jvb
  template:
    metadata:
      labels:
        workload.user.cattle.io/workloadselector: statefulSet-jitsi-jvb
    spec:
      containers:
      - env:
        - name: DOCKER_HOST_ADDRESS
          value: <IP Address of one of the worker node>
        - name: JICOFO_AUTH_USER
          value: focus
        - name: JVB_AUTH_PASSWORD
          value: password
        - name: JVB_AUTH_USER
          value: jvb
        - name: JVB_BREWERY_MUC
          value: jvbbrewery
        - name: JVB_PORT
          value: '"30000"'
        - name: JVB_STUN_SERVERS
          value: stun.l.google.com:19302,stun1.l.google.com:19302,stun2.l.google.com:19302
        - name: JVB_TCP_PORT
          value: '"30001"'
        - name: TZ
          value: Europe/Paris
        - name: XMPP_AUTH_DOMAIN
          value: auth.meet.jitsi
        - name: XMPP_DOMAIN
          value: meet.jitsi
        - name: XMPP_INTERNAL_MUC_DOMAIN
          value: internal-muc.meet.jitsi
        - name: XMPP_SERVER
          value: prosody
        image: jitsi/jvb
        imagePullPolicy: Always
        name: jvb
        ports:
        - containerPort: 30000
          hostPort: 30000
          name: 30000udp300003
          protocol: UDP
        - containerPort: 30001
          name: 30001tcp300011
          protocol: TCP
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities: {}
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  updateStrategy:
    type: RollingUpdate
